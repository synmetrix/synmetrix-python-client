# Generated by ariadne-codegen
# Source: synmetrix_graphql_client/queries.graphql

from typing import Any, Dict

from .async_base_client import AsyncBaseClient
from .create_data_source import CreateDataSource
from .create_version import CreateVersion
from .current_user import CurrentUser
from .delete_data_source import DeleteDataSource
from .input_types import datasources_insert_input, versions_insert_input


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def current_user(self, id: Any, **kwargs: Any) -> CurrentUser:
        query = gql(
            """
            query CurrentUser($id: uuid!) {
              users_by_pk(id: $id) {
                id
                display_name
                avatar_url
                account {
                  email
                }
                members(order_by: {updated_at: desc}) {
                  member_roles {
                    team_role
                  }
                  user {
                    id
                    avatar_url
                    display_name
                    account {
                      email
                    }
                  }
                  team {
                    id
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="CurrentUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CurrentUser.model_validate(data)

    async def create_data_source(
        self, object: datasources_insert_input, **kwargs: Any
    ) -> CreateDataSource:
        query = gql(
            """
            mutation CreateDataSource($object: datasources_insert_input!) {
              insert_datasources_one(object: $object) {
                id
                name
                branches {
                  id
                }
                sql_credentials {
                  id
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"object": object}
        response = await self.execute(
            query=query,
            operation_name="CreateDataSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDataSource.model_validate(data)

    async def create_version(
        self, object: versions_insert_input, **kwargs: Any
    ) -> CreateVersion:
        query = gql(
            """
            mutation CreateVersion($object: versions_insert_input!) {
              insert_versions_one(object: $object) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"object": object}
        response = await self.execute(
            query=query, operation_name="CreateVersion", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateVersion.model_validate(data)

    async def delete_data_source(self, id: Any, **kwargs: Any) -> DeleteDataSource:
        query = gql(
            """
            mutation DeleteDataSource($id: uuid!) {
              delete_datasources_by_pk(id: $id) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="DeleteDataSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteDataSource.model_validate(data)
