{
  "description": {
    "project": "Synmetrix Python Client - A Python library for interacting with the Synmetrix API",
    "structure": {
      "src/synmetrix_python_client/": "Main package directory",
      "src/synmetrix_python_client/auth.py": "Authentication client for JWT token management",
      "src/synmetrix_python_client/graphql_client/": "GraphQL client implementation",
      "src/synmetrix_python_client/use_cases/": "High-level use cases and utilities",
      "tests/": "Test directory with unit and integration tests"
    },
    "naming_conventions": {
      "unit_tests": "test_*_unit.py (e.g., test_auth_unit.py)",
      "integration_tests": "test_*_integration.py (e.g., test_auth_integration.py)",
      "use_cases": "Descriptive names for specific functionality (e.g., upload_data_models.py)",
      "graphql_queries": "Descriptive names in snake_case.gql (e.g., current_user.gql)"
    },
    "test_organization": {
      "tests/unit/": "Unit tests focusing on individual components",
      "tests/integration/": "Integration tests for end-to-end flows",
      "tests/conftest.py": "Shared test fixtures and configuration"
    },
    "key_components": {
      "auth": "JWT-based authentication with token management",
      "graphql": "Fully typed async GraphQL client with WebSocket support",
      "use_cases": "High-level functionality like data model uploads"
    }
  }
}
